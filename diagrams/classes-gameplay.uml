@startuml

title Cell Crawler - Gameplay

class Character {
  +Observable[int] health
  +Observable[int] max_health
  -dict[str, Command] commands
  #set_command(str, Command | None)
  +attack(Character)
  +bool attacked(int damage)
  #abstract kill()
}

class Command {
  +run(Character)
}

class CommandBuilder {
  Abstract in X
  -list[X] → Command
  +add(X)
  +remove(X)
  +Command build()
}

Character --> Command: uses

CommandBuilder --> Command: creates

Player *-- CommandBuilder: many

class Node {
  impl by the engine
  +Vec3 get_pos()
}

Character *-left- Node

Environment *-down- Character: many

abstract class MovementStrategy {
  +(x,y) next_cell(x, y, maze)
  -Command make_command(x, y)
}

Command <|-- MovementCommand
Command <|-- RotationCommand

class Player

class Pathfinder {
  +int distance(x, y)
}

Character <|-- Mob
Mob *-- MovementStrategy
Character <|-- Player
Player *-- Inventory
Player *-- Pathfinder: runs every second
Inventory *-- InventoryItem: many
MovementStrategy <|-- TargetStrategy
MovementStrategy <|-- StandStillStrategy

class Inventory {
  +add(item)
  +remove(item)
  +equip(uuid)
  +unequip(uuid)
}

class InventoryItem {
  +CalculationNode equipment()
  +Node ui()
}

class CalculationNode {
  #CalculationNode parent
  +T compute(Event[T], T)
  #void add(Event[T] → T)
  +void destroy()
}

class Duration {
  destroys parent
  when runs out
  -float duration
}

CalculationNode <|-- Duration
CalculationNode <|-- EffectStun
EffectStun *-right- Duration
CalculationNode <|-- ArmorItem

Character *-- CalculationNode
CalculationNode *-- CalculationNode: children, 0-many

Environment *-right- Maze
Maze *-- Cell: many

LevelManager *-right- Environment
LevelManager *-left- LevelFactory
LevelFactory *-left- MobFactory

abstract class MobFactory {
  -int max_spawns
  +void spawn(int index)
}

MobFactory --> Character: creates

@enduml