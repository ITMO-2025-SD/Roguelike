@startuml

title Cell Crawler - Characters

class Character {
  +(x,y) next_cell(x, y)
}

class Node {
  impl by the engine
  +Vec3 get_pos()
}

class Environment {
  +void update_trackers()
}
class PositionTracker

Character *-left- Node

class PositionTracker {
  -x,y current
}

Environment *-down- Character: many
Character *-right- PositionTracker

abstract class MovementStrategy {
  +(x,y) next_cell(x, y, maze)
}

class Player {
  -set[Keybind] active
}

Character <|-- Mob
Mob *-- MovementStrategy
Character <|-- Player
MovementStrategy <|-- TargetStrategy
MovementStrategy <|-- StandStillStrategy

class CalculationNode {
  #CalculationNode parent
  +T compute(Event[T], T)
  #void add(Event[T] → T)
  +void destroy()
}

class Duration {
  destroys parent
  when runs out
  -float duration
}

CalculationNode <|-- Duration
CalculationNode <|-- EffectStun
EffectStun *-right- Duration
CalculationNode <|-- ArmorItem

Character *-- CalculationNode
CalculationNode *-- CalculationNode: children, 0-many

Environment *-down- CellManager
PositionTracker -up-> CellManager

class CellManager {
  -dict[{x, y} → list[Character]]
  +bool enter(Character, x, y)
}

abstract class Cell {
  +bool walkable(Character)
  +void enter(Character)
}

Cell <|-- Wall
Cell <|-- Empty
Cell <|-- Portal

Environment *-right- Maze
Maze *-- Cell: many*many
CellManager --> Cell

LevelManager *-right- Environment
LevelManager *-left- LevelFactory
LevelFactory *-left- MobFactory

abstract class MobFactory {
  -int max_spawns
  +void spawn(int index)
}

MobFactory --> Character
MobFactory -left|> ConstMobFactory
MobFactory -left|> RandomMobFactory

@enduml